class Solution {
    ListNode findMiddle(ListNode head)
    {
        ListNode slow = head;
        ListNode fast= head;
        if(fast.next!=null && fast.next.next!=null)
        { 
            fast=fast.next.next;
            slow=slow.next;           
        }
        return slow;
    }
    ListNode reverse(ListNode head)
    {
        ListNode prev = null;
        ListNode curr = head;
        while(curr!=null)
        {
            ListNode nxt = curr.next;
            curr.next=prev;
            prev = curr;
            curr=nxt;
        }
        return prev;

    }
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null)
        return true;
        
        ListNode middle = findMiddle(head);
        ListNode second = reverse(middle.next);

        ListNode start = head;
        while (second != null && start!=null) {
            if (start.val != second.val) return false;
            start = start.next;
            second = second.next;
        }
        return true;
    }
}
