
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        int maxWidth = 1;
        Queue<TreeNode> queue = new LinkedList<>();
        Map<TreeNode, Integer> nodeToIndexMap = new HashMap<>();

        queue.offer(root);
        nodeToIndexMap.put(root, 1);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            int leftIndex = 0;
            int rightIndex = 0;

            for (int i = 0; i < levelSize; i++) {
                TreeNode node = queue.poll();
                int index = nodeToIndexMap.get(node);

                if (i == 0) {
                    leftIndex = index;
                }

                if (i == levelSize - 1) {
                    rightIndex = index;
                }

                if (node.left != null) {
                    queue.offer(node.left);
                    nodeToIndexMap.put(node.left, index * 2);
                }

                if (node.right != null) {
                    queue.offer(node.right);
                    nodeToIndexMap.put(node.right, index * 2 + 1);
                }
            }
            maxWidth = Math.max(maxWidth, rightIndex - leftIndex + 1);
        }
        
        return maxWidth;
    }
}
